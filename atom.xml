<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>南方车站的聚会</title>
  
  <subtitle>生活如诗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wsxa.top/"/>
  <updated>2019-04-17T12:42:48.292Z</updated>
  <id>https://wsxa.top/</id>
  
  <author>
    <name>wsx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>台湾自由行</title>
    <link href="https://wsxa.top/2019/04/14/4/"/>
    <id>https://wsxa.top/2019/04/14/4/</id>
    <published>2019-04-14T09:28:29.065Z</published>
    <updated>2019-04-17T12:42:48.292Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p><br><a id="more"></a><br><img src="/music/post-rock_2/nf.png" alt></p><p></p><center>蝶道还在，可甜梅号没了</center><br>        <div id="aplayer-euzqDZLc" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-euzqDZLc"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "南方蝶道",              author: "甜梅号",              url: "/music/post-rock_2/南方蝶道.mp3",              pic: "/music/post-rock_2/甜梅号.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      第二弹
    
    </summary>
    
      <category term="Music" scheme="https://wsxa.top/categories/Music/"/>
    
    
      <category term="Post-Rock" scheme="https://wsxa.top/tags/Post-Rock/"/>
    
  </entry>
  
  <entry>
    <title>沉沦人世，超脱思想</title>
    <link href="https://wsxa.top/2019/04/14/3/"/>
    <id>https://wsxa.top/2019/04/14/3/</id>
    <published>2019-04-14T08:06:54.579Z</published>
    <updated>2019-04-17T12:47:12.413Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p></p><p class="description"></p><p><br><a id="more"></a><br><img src="/music/post-rock_1/ch.png" alt></p><p></p><center>文雀雁引愁心去，彩虹山衔好月来——摘自网友蛋泥儿</center><br>        <div id="aplayer-fYcUvttS" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;">            <pre class="aplayer-lrc-content"></pre>        </div>        <script>          var ap = new APlayer({            element: document.getElementById("aplayer-fYcUvttS"),            narrow: false,            autoplay: false,            showlrc: false,            music: {              title: "彩虹山",              author: "文雀",              url: "/music/post-rock_1/彩虹山.mp3",              pic: "/music/post-rock_1/文雀.png",              lrc: ""            }          });          window.aplayers || (window.aplayers = []);          window.aplayers.push(ap);        </script><p></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      第一弹
    
    </summary>
    
      <category term="Music" scheme="https://wsxa.top/categories/Music/"/>
    
    
      <category term="Post-Rock" scheme="https://wsxa.top/tags/Post-Rock/"/>
    
  </entry>
  
  <entry>
    <title>个人博客搭建</title>
    <link href="https://wsxa.top/2019/04/07/2/"/>
    <id>https://wsxa.top/2019/04/07/2/</id>
    <published>2019-04-07T05:43:25.067Z</published>
    <updated>2019-04-13T13:26:00.700Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><a id="more"></a><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>前言</h2></td></tr></tbody></table><br>  在搭建个人博客的时候，遇到过许多坑。其中有些是出现少许纰漏的教程，也有些是作者未提及到的内容，导致在搭建博客的时候，重建了好多次（其中或多或少有自己不谨慎的原因，比如说未按照教程步骤来，亦或是单词字母的写错，都会给博客搭建带来阻碍）。左拼右凑，才有了现在的一点点样子。由此也产生了自己写教程的想法，于是就有了这篇文章。本文罗列了搭建博客的各个步骤，以及在搭建博客的过程中容易出现的一些小错误。请恕我才疏学浅，文中不足之处，还请谅解!</p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>说明</h2></td></tr></tbody></table></p><p><table><tbody><tr><td bgcolor="linen"><br><b>准备清单：</b><br>    一、<code>GitHub</code>账户的应用.<br>      1.账号注册<br>      2.仓库的创建<br>    二、软件安装和环境搭建.<br>      1.<code>Node.js</code>安装.<br>      2.<code>Node.js</code>环境配置.<br>      3.测试.<br>      4.<code>Git</code>安装.<br>      5.<code>Git</code>环境配置.<br>      6.测试.<br>    三、<code>Hexo</code>安装和配置<br>    四、远程连接和部署<br>      1.远程连接:本地Git和远程GitHub连接.<br>      4.上传博客项目.<br>    五、关于<code>域名</code>.<br></td></tr></tbody></table><br>下面就开始我们的博客搭建之旅。</p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>GitHub账户应用</h2></td></tr></tbody></table></p><h3 id="账号注册"><a href="#账号注册" class="headerlink" title="账号注册"></a>账号注册</h3><p></p><hr><br>1.百度找到<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a>官方网站<br>2.点击<code>Sign up</code>注册GitHub账号<br>3.注册步骤<br> 第一步<br>   填写账号邮箱密码，点击<code>Create An Account</code> 进入下一步<br>   系统会向你填写的邮箱发送一封确认邮件，去登陆邮箱确认<br> 第二步<br>   保持默认，点击<code>Continue</code>跳到下一步<br> 第三步<br>   问卷可选填，然后点击提交按钮，账号就注册成功<p></p><p></p><hr><p></p><h3 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h3><p></p><hr><br>1.点击右上角<code>+▼</code>记号展开列表，如下图所示：<br><img src="/images/2/github1.png" alt="github"><br>2.点击<code>New repository</code>，如下图所示：<br><img src="/images/2/github2.png" alt="github"><br>3.仓库信息填写  <p></p><blockquote><p>注意:<br>  1. <code>Repository name</code>下名字为<code>xxx.github.io</code><br>   其中<code>xxx</code>为你GitHub账户用户名，即<code>Owner</code><br>  2.库一定要选<code>public</code></p></blockquote><p>4.点击<code>Create repository</code>即可，如下图所示：<br><img src="/images/2/github3.png" alt="github"><br>左侧<code>xxx/xxx.github.io</code>即为你刚才新建的仓库，<code>xxx</code>为你自己的用户名<br>5.仓库创建完毕</p><blockquote><p>说明：博客项目需部署到此仓库中，才可以让博客在浏览器中被访问，<code>xxx.github.io</code>为GitHub所给的二级域名</p></blockquote><p></p><hr><p></p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>软件安装和环境搭建</h2></td></tr></tbody></table></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p></p><hr><br>1.简介<br>Node.js 就是运行在服务端的<code>JavaScript</code>，<code>Node.js</code>的包管理器<code>npm</code>，是全球最大的开源库生态系统。<br>2.下载地址：<a href="https://nodejs.org/en/download" target="_blank" rel="noopener">https://nodejs.org/en/download</a><br>下载对应你系统的<code>Node.js</code>版本，如下图所示：<br><img src="/images/2/node1.png" alt="node"><br>3.安装<br>按照其默认步骤安装完成即可（安装目录自己选择）<br>4.测试<br>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口依次输入命令：<br>   <code>node -v</code><br>   <code>npm -v</code><br>出现版本号则表示安装成功<br><img src="/images/2/node2.png" alt="node"><br>5.说明<br>1).安装完后的目录，如下图所示：<br><img src="/images/2/node3.png" alt="node"><br>2).新版的Node.js自带npm（npm的作用就是对Node.js依赖的包进行管理）<p></p><p></p><hr><p></p><h3 id="Node-js环境配置"><a href="#Node-js环境配置" class="headerlink" title="Node.js环境配置"></a>Node.js环境配置</h3><p></p><hr><p></p><blockquote><p>说明<br>环境配置主要配置的是<code>npm</code>安装的全局模块所在的路径，以及缓存cache的路径<br>要不然会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中</p></blockquote><p>1.创建路径<br>全模块所在路径和缓存路径放在我的【D:\Blog\Node】文件夹中<br>在【D:\Blog\Node】下创建两个文件夹【node_global】及【node_cache】，如下图所示：<br><img src="/images/2/node4.png" alt="node"><br>2.命令输入<br>创建完两个空文件夹之后，打开cmd命令窗口，输入命令：<br>   <code>npm config set prefix "D:\Develop\nodejs\node_global"</code><br>   <code>npm config set cache "D:\Develop\nodejs\node_cache"</code><br>3.设置环境变量<br>关闭cmd窗口，打开“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”，如下图所示：<br><img src="/images/2/node5.png" alt="node"><br>进入环境变量对话框<br>在【系统变量】下新建<code>NODE_PATH</code>，变量值输入【D:\Blog\Node\node_global\node_modules】，如下图所示：<br><img src="/images/2/node6.png" alt="node"><br>将【用户变量】下的<code>Path</code>中的【C:\Users\260452\AppData\Roaming\npm】修改为【D:\Blog\Node\node_global】，如下图所示：<br><img src="/images/2/node7.png" alt="node"></p><p></p><hr><p></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p></p><hr><br>配置完后，安装最常用的<code>express</code>模块测试<br>打开cmd窗口，<br>输入如下命令进行模块的全局安装：<br>   <code>npm install express -g</code>（<code>-g</code>是全局安装的意思）<p></p><p></p><hr><p></p><h3 id="Git安装"><a href="#Git安装" class="headerlink" title="Git安装"></a>Git安装</h3><p></p><hr><br>1.下载地址:<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a>,如下图所示：<br><img src="/images/2/git1.png" alt="node"><br>2.安装<br>按照其默认步骤安装完成即可（安装目录自己选择,我的和<code>Node</code>放在同一个文件夹下）<br>3.测试<br>在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口，依次输入命令：<br>   <code>node -v</code><br>   <code>git version</code><br>出现版本号则表示安装成功,如下图所示：<br><img src="/images/2/git2.png" alt="node"><p></p><p></p><hr><p></p><h3 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h3><p></p><hr><br>博客搭建未涉及Git环境配置<p></p><p></p><hr><p></p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>Hexo安装和配置</h2></td></tr></tbody></table></p><h3 id="hexo安装配置"><a href="#hexo安装配置" class="headerlink" title="hexo安装配置"></a>hexo安装配置</h3><p></p><hr><br>1.先在任意磁盘创建一个文件夹<code>hexo</code>（我的和<code>Node</code>、<code>Git</code>在同一个文件夹下）<br>2.然后选中<code>hexo</code>文件夹右键选择<code>Git Bash Here</code>，输入命令:<br>   <code>npm install -g hexo-cli</code><br>出现下图所示则表示成功,如下图所示：<br><img src="/images/2/hexo1.png" alt="node"><br>   <code>hexo init xxx</code>(<code>xxx</code>名字可任意取,是你博客的名字)<br>出现下图所示则表示成功,如下图所示：<br><img src="/images/2/hexo2.png" alt="node"><br>3.blog文件夹里出现许多文件，如下图所示：<br><img src="/images/2/hexo3.png" alt="node"><br>4.继续，输入命令:<br>   <code>cd xxx</code><br>5.输入命令:<br>   <code>hexo s</code><br>出现下图所示则表示成功,如下图所示：<br><img src="/images/2/hexo4.png" alt="node"><br>6.此时你可以在浏览器中访问箭头所示网址，博客生成，如下图所示：<br><img src="/images/2/hexo5.png" alt="node"><p></p><blockquote><p>注意：箭头所示地址为你本地调试地址，浏览器中搜不到<br>博客尚且只能在本地访问，要想让别人访问，需将Blog当中的文件部署到GitHub上</p></blockquote><p></p><hr><p></p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>远程连接和部署</h2></td></tr></tbody></table></p><h3 id="远程连接-本地Git和远程GitHub连接"><a href="#远程连接-本地Git和远程GitHub连接" class="headerlink" title="远程连接:本地Git和远程GitHub连接"></a>远程连接:本地Git和远程GitHub连接</h3><p></p><hr><br>1.命令输入<br> a.回到你的Git Bash Here中，输入命令：<br>   <code>git config -–global user.name “yourname”</code><br> b.输入命令:<br>   <code>git config -–global user.email “youremail”</code><p></p><blockquote><p><code>yourname</code>为你的GitHub账户用户名，<code>youremail</code>为你GitHub账户的邮箱。</p></blockquote><p> c.接着输入命令：<br>   <code>ssh-keygen -t rsa -C "your_email@xxx.com"</code></p><blockquote><p><a href="mailto:`your_email@xxx.com" target="_blank" rel="noopener">`your_email@xxx.com</a>`为GitHub账户的邮箱</p></blockquote><p> d.然后一路回车，使用默认值即可<br>2.此时会在【C\Users\用户名.ssh\id_rsa】生成连接GitHub账户所需的私钥<code>id_rsa</code>和公钥<code>id_rsa.pub</code>，如图所示：</p><blockquote><p>注意：在这一步可能会出错，按Git Bash Here上操作即可<br><code>Knowm_hosts</code>为出错后根据操作得出的新文件</p></blockquote><p><img src="/images/2/yc1.png" alt="node"><br>3.打开<code>id_rsa.pub</code>文件，复制<code>key</code>，登陆GitHub，打开<code>Settings</code>，如图所示：<br><img src="/images/2/yc2.png" alt="node"><br>4.左边选择<code>SSH and GPG Keys</code>，选择<code>New SSH Key</code>，如图所示：<br><img src="/images/2/yc3.png" alt="node"><br>把刚刚复制的内容粘贴到<code>Key</code>中，<code>Title</code>随便填，保存，如图所示：<br><img src="/images/2/yc4.png" alt="node"></p><p></p><hr><p></p><h3 id="上传博客项目"><a href="#上传博客项目" class="headerlink" title="上传博客项目"></a>上传博客项目</h3><p></p><hr><br>1.回到Git Bash here下，在Git Bash Here下输入命令：<br>   <code>ssh -T git@github.com</code><br>2.出现<code>You’ve successfully authenticated, but GitHub does not provide shell access</code>。这就表示已成功连上GitHub账户<br>3.接下来将本地仓库上传到GitHub账户上去，hexo和GitHub就产生了关联，也就是将hexo生成的文章部署到GitHub账户上<br>4.打开站点配置文件（<code>xxx</code>内）中的<code>_config.yml</code>，翻到末尾，配置<code>deploy</code><br>把<code>repository</code>中的<code>Fox-w</code>改成你自己的GitHub账户用户名,然后保存<br><img src="/images/2/bs1.png" alt="node"><br>5.然后回到Git Bash Here内，输入命令：<br>   <code>npm install hexo-deployer-git --save</code><br>依次输入命令:<br>   <code>hexo clean</code><br>   <code>hexo g</code><br>   <code>hexo d</code><p></p><blockquote><p>说明：<br>（<code>hexo clean</code>清除文件夹之前生成的东西<br><code>hexo generate</code>生成静态文章，缩写<code>hexo g</code><br><code>hexo deploy</code>部署文章，缩写<code>hexo d</code><br><code>hexo g</code>和<code>hexo d</code>可以合并成<code>hexo g -d</code>）</p></blockquote><blockquote><p>注意<code>hexo d</code>时需要你输入<code>username</code>和<code>password</code>，下一次上传时就无需输入，<br><code>usename</code>和<code>password</code>为你GitHub账户的用户名和密码。</p></blockquote><p><img src="/images/2/bs2.png" alt="node"><br>得到下图就表示部署成功，稍后访问<code>http://yourname.github.io</code>这个网站看到你的博客!<br><img src="/images/2/bs3.png" alt="node"></p><blockquote><p>注意：上文中所有出现的<code>xxx</code>均为你<code>hexo</code>文件夹下创建的博客名，一切命令的操作也都是在<code>xxx</code>文件右键<code>Git Bash Here下</code>的，即<code>Git Bash Here</code>为在<code>xxx</code>文件右键的命令操作</p></blockquote><p></p><hr><p></p><p><table><tbody><tr><td bgcolor="bfe1f1"><h2>关于域名</h2></td></tr></tbody></table><br>实际上，使用GitHub提供的二级域名<code>xxx.github.io</code>也是可以使用的，但是我自己觉得购买一个域名更会有一种踏实感，是自己的所有物，这任凭各位选择</p><h3 id="购买域名"><a href="#购买域名" class="headerlink" title="购买域名"></a>购买域名</h3><p></p><hr><br>1.登陆阿里云，填写好资料信息（购买地址随自己选择，不必非在阿里云）<br>2.购买一个自己喜欢的域名<br>3.实名认证后，等待域名审核（一般3~5个工作日）<p></p><p></p><hr><p></p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p></p><hr><br>1.在键盘按下【win+R】键，输入<code>cmd</code>，然后回车，打开cmd窗口，输入<code>ping yourname.github.io</code>获得你域名的ip地址,如下图所示：<br><img src="/images/2/ping1.png" alt="node"><br>2.然后登录阿里云控制台，点击管理控制台–域名–解析，如下图所示：<br><img src="/images/2/ping2.png" alt="node"><br>点击新手指导，将刚刚得到的 IP 地址填到记录值一栏，点击确定即可。填完后解析列表会出现两条记录，如下图所示：<br><img src="/images/2/ping3.png" alt="node"><p></p><p></p><hr><p></p><h3 id="域名绑定"><a href="#域名绑定" class="headerlink" title="域名绑定"></a>域名绑定</h3><p></p><hr><br>1.回到GitHub账户，在仓库<code>yourname.github.io</code>中添加一个<code>CNAME</code>文件，在里面添加你刚刚解析的域名，然后保存，如下图所示：<br><img src="/images/2/sz1.png" alt="node"><br>2.打开<code>yourname.github.io</code>项目的<code>Settings</code>，向下翻，即可在<code>github pages</code>看到新域名配置完成，代表可以访问新域名了，如下图所示：<br><img src="/images/2/sz2.png" alt="node"><br><img src="/images/2/sz3.png" alt="node"><p></p><blockquote><p>注意：博客项目的每次上传都会将GitHub账户的仓库<code>yourname.github.io</code>内的文件全部替换，<code>CNAME</code>也会不复存在，那就无法登陆新域名了<br>解决方法：在【xxx\source】文件下建立一个<code>CNAME</code>文件，里面填入新域名即可</p></blockquote><p></p><hr><br>至此，博客搭建初步完成，博客主题更换配置见下篇文章。<p></p><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      新手上路
    
    </summary>
    
      <category term="IT" scheme="https://wsxa.top/categories/IT/"/>
    
    
      <category term="hexo" scheme="https://wsxa.top/tags/hexo/"/>
    
      <category term="github" scheme="https://wsxa.top/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>海子的诗（1）</title>
    <link href="https://wsxa.top/2019/04/06/1/"/>
    <id>https://wsxa.top/2019/04/06/1/</id>
    <published>2019-04-06T13:13:55.001Z</published>
    <updated>2019-04-12T14:50:34.436Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="description"></p><a id="more"></a><center><b>第一弹</b></center><hr><center><b>活在珍贵的人间 </b></center><center>—海子<br><br><br>活在这珍贵的人间 <br><br>太阳强烈 <br><br>水波温柔 <br><br>一层层白云覆盖着 <br><br>我 <br><br>踩在青草上 <br><br>感到自己是彻底干净的黑土块 </center><br><br><br><center>活在这珍贵的人间 <br><br>泥土高溅 <br><br>扑打面颊 <br><br>活在这珍贵的人间 <br><br>人类和植物一样幸福 <br><br>爱情和雨水一样幸福 <br><br><br>——选自《海子诗全集》，作家出版社</center><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    <summary type="html">
    
      前不久是海子的纪念日
    
    </summary>
    
      <category term="文学" scheme="https://wsxa.top/categories/%E6%96%87%E5%AD%A6/"/>
    
    
      <category term="诗歌" scheme="https://wsxa.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
</feed>
