<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[海子的诗（2）]]></title>
    <url>%2F2019%2F04%2F18%2F6%2F</url>
    <content type="text"><![CDATA[第二弹 (function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://wsxa.oss-cn-beijing.aliyuncs.com/hz.mp4"},"danmaku":{"api":"https://api.prprpr.me/dplayer/"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})() 摘自豆瓣网友——小花匠陈 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[我不想往前]]></title>
    <url>%2F2019%2F04%2F17%2F5%2F</url>
    <content type="text"><![CDATA[身体在一直坠落，慢慢往下沉，软泥与绿藻在拉着我，荡啊荡啊 var ap = new APlayer({ element: document.getElementById("aplayer-sNNbLKDw"), narrow: false, autoplay: false, showlrc: false, music: { title: "污水塘", author: "惘闻", url: "https://wsxa.oss-cn-beijing.aliyuncs.com/%E6%B1%A1%E6%B0%B4%E5%A1%98.mp3", pic: "http://pq3wm8lrv.bkt.clouddn.com/%E6%83%98%E9%97%BB.png", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Post-Rock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[台湾自由行]]></title>
    <url>%2F2019%2F04%2F14%2F4%2F</url>
    <content type="text"><![CDATA[蝶道还在，可甜梅号没了 var ap = new APlayer({ element: document.getElementById("aplayer-fAbSDbeZ"), narrow: false, autoplay: false, showlrc: false, music: { title: "南方蝶道", author: "甜梅号", url: "http://pq3wm8lrv.bkt.clouddn.com/%E5%8D%97%E5%B1%B1%E8%9D%B6%E9%81%93.mp3", pic: "http://pq3wm8lrv.bkt.clouddn.com/%E7%94%9C%E6%A2%85%E5%8F%B7.png", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Post-Rock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[沉沦人世，超脱思想]]></title>
    <url>%2F2019%2F04%2F14%2F3%2F</url>
    <content type="text"><![CDATA[文雀雁引愁心去，彩虹山衔好月来——摘自网友蛋泥儿 var ap = new APlayer({ element: document.getElementById("aplayer-rrYOrHmd"), narrow: false, autoplay: false, showlrc: false, music: { title: "彩虹山", author: "文雀", url: "http://pq3wm8lrv.bkt.clouddn.com/%E5%BD%A9%E8%99%B9%E5%B1%B1.mp3", pic: "http://pq3wm8lrv.bkt.clouddn.com/%E6%96%87%E9%9B%80.png", lrc: "" } }); window.aplayers || (window.aplayers = []); window.aplayers.push(ap); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>Music</category>
      </categories>
      <tags>
        <tag>Post-Rock</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[个人博客搭建]]></title>
    <url>%2F2019%2F04%2F07%2F2%2F</url>
    <content type="text"><![CDATA[前言 在搭建个人博客的时候，遇到过许多坑。其中有些是出现少许纰漏的教程，也有些是作者未提及到的内容，导致在搭建博客的时候，重建了好多次（其中或多或少有自己不谨慎的原因，比如说未按照教程步骤来，亦或是单词字母的写错，都会给博客搭建带来阻碍）。左拼右凑，才有了现在的一点点样子。由此也产生了自己写教程的想法，于是就有了这篇文章。本文罗列了搭建博客的各个步骤，以及在搭建博客的过程中容易出现的一些小错误。请恕我才疏学浅，文中不足之处，还请谅解! 说明 准备清单： 一、GitHub账户的应用. 1.账号注册 2.仓库的创建 二、软件安装和环境搭建. 1.Node.js安装. 2.Node.js环境配置. 3.测试. 4.Git安装. 5.Git环境配置. 6.测试. 三、Hexo安装和配置 四、远程连接和部署 1.远程连接:本地Git和远程GitHub连接. 4.上传博客项目. 五、关于域名.下面就开始我们的博客搭建之旅。 GitHub账户应用 账号注册1.百度找到GitHub官方网站2.点击Sign up注册GitHub账号3.注册步骤 第一步 填写账号邮箱密码，点击Create An Account 进入下一步 系统会向你填写的邮箱发送一封确认邮件，去登陆邮箱确认 第二步 保持默认，点击Continue跳到下一步 第三步 问卷可选填，然后点击提交按钮，账号就注册成功 创建仓库1.点击右上角+▼记号展开列表，如下图所示：2.点击New repository，如下图所示：3.仓库信息填写 注意: 1. Repository name下名字为xxx.github.io 其中xxx为你GitHub账户用户名，即Owner 2.库一定要选public 4.点击Create repository即可，如下图所示：左侧xxx/xxx.github.io即为你刚才新建的仓库，xxx为你自己的用户名5.仓库创建完毕 说明：博客项目需部署到此仓库中，才可以让博客在浏览器中被访问，xxx.github.io为GitHub所给的二级域名 软件安装和环境搭建 安装Node.js1.简介Node.js 就是运行在服务端的JavaScript，Node.js的包管理器npm，是全球最大的开源库生态系统。2.下载地址：https://nodejs.org/en/download下载对应你系统的Node.js版本，如下图所示：3.安装按照其默认步骤安装完成即可（安装目录自己选择）4.测试在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口依次输入命令： node -v npm -v出现版本号则表示安装成功5.说明1).安装完后的目录，如下图所示：2).新版的Node.js自带npm（npm的作用就是对Node.js依赖的包进行管理） Node.js环境配置 说明环境配置主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径要不然会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中 1.创建路径全模块所在路径和缓存路径放在我的【D:\Blog\Node】文件夹中在【D:\Blog\Node】下创建两个文件夹【node_global】及【node_cache】，如下图所示：2.命令输入创建完两个空文件夹之后，打开cmd命令窗口，输入命令： npm config set prefix "D:\Develop\nodejs\node_global" npm config set cache "D:\Develop\nodejs\node_cache"3.设置环境变量关闭cmd窗口，打开“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”，如下图所示：进入环境变量对话框在【系统变量】下新建NODE_PATH，变量值输入【D:\Blog\Node\node_global\node_modules】，如下图所示：将【用户变量】下的Path中的【C:\Users\260452\AppData\Roaming\npm】修改为【D:\Blog\Node\node_global】，如下图所示： 测试配置完后，安装最常用的express模块测试打开cmd窗口，输入如下命令进行模块的全局安装： npm install express -g（-g是全局安装的意思） Git安装1.下载地址:https://git-scm.com/downloads,如下图所示：2.安装按照其默认步骤安装完成即可（安装目录自己选择,我的和Node放在同一个文件夹下）3.测试在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口，依次输入命令： node -v git version出现版本号则表示安装成功,如下图所示： Git环境配置博客搭建未涉及Git环境配置 Hexo安装和配置 hexo安装配置1.先在任意磁盘创建一个文件夹hexo（我的和Node、Git在同一个文件夹下）2.然后选中hexo文件夹右键选择Git Bash Here，输入命令: npm install -g hexo-cli出现下图所示则表示成功,如下图所示： hexo init xxx(xxx名字可任意取,是你博客的名字)出现下图所示则表示成功,如下图所示：3.blog文件夹里出现许多文件，如下图所示：4.继续，输入命令: cd xxx5.输入命令: hexo s出现下图所示则表示成功,如下图所示：6.此时你可以在浏览器中访问箭头所示网址，博客生成，如下图所示： 注意：箭头所示地址为你本地调试地址，浏览器中搜不到博客尚且只能在本地访问，要想让别人访问，需将Blog当中的文件部署到GitHub上 远程连接和部署 远程连接:本地Git和远程GitHub连接1.命令输入 a.回到你的Git Bash Here中，输入命令： git config -–global user.name “yourname” b.输入命令: git config -–global user.email “youremail” yourname为你的GitHub账户用户名，youremail为你GitHub账户的邮箱。 c.接着输入命令： ssh-keygen -t rsa -C "your_email@xxx.com" `your_email@xxx.com`为GitHub账户的邮箱 d.然后一路回车，使用默认值即可2.此时会在【C\Users\用户名.ssh\id_rsa】生成连接GitHub账户所需的私钥id_rsa和公钥id_rsa.pub，如图所示： 注意：在这一步可能会出错，按Git Bash Here上操作即可Knowm_hosts为出错后根据操作得出的新文件 3.打开id_rsa.pub文件，复制key，登陆GitHub，打开Settings，如图所示：4.左边选择SSH and GPG Keys，选择New SSH Key，如图所示：把刚刚复制的内容粘贴到Key中，Title随便填，保存，如图所示： 上传博客项目1.回到Git Bash here下，在Git Bash Here下输入命令： ssh -T git@github.com2.出现You’ve successfully authenticated, but GitHub does not provide shell access。这就表示已成功连上GitHub账户3.接下来将本地仓库上传到GitHub账户上去，hexo和GitHub就产生了关联，也就是将hexo生成的文章部署到GitHub账户上4.打开站点配置文件（xxx内）中的_config.yml，翻到末尾，配置deploy把repository中的Fox-w改成你自己的GitHub账户用户名,然后保存5.然后回到Git Bash Here内，输入命令： npm install hexo-deployer-git --save依次输入命令: hexo clean hexo g hexo d 说明：（hexo clean清除文件夹之前生成的东西hexo generate生成静态文章，缩写hexo ghexo deploy部署文章，缩写hexo dhexo g和hexo d可以合并成hexo g -d） 注意hexo d时需要你输入username和password，下一次上传时就无需输入，usename和password为你GitHub账户的用户名和密码。 得到下图就表示部署成功，稍后访问http://yourname.github.io这个网站看到你的博客! 注意：上文中所有出现的xxx均为你hexo文件夹下创建的博客名，一切命令的操作也都是在xxx文件右键Git Bash Here下的，即Git Bash Here为在xxx文件右键的命令操作 关于域名实际上，使用GitHub提供的二级域名xxx.github.io也是可以使用的，但是我自己觉得购买一个域名更会有一种踏实感，是自己的所有物，这任凭各位选择 购买域名1.登陆阿里云，填写好资料信息（购买地址随自己选择，不必非在阿里云）2.购买一个自己喜欢的域名3.实名认证后，等待域名审核（一般3~5个工作日） 域名解析1.在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口，输入ping yourname.github.io获得你域名的ip地址,如下图所示：2.然后登录阿里云控制台，点击管理控制台–域名–解析，如下图所示：点击新手指导，将刚刚得到的 IP 地址填到记录值一栏，点击确定即可。填完后解析列表会出现两条记录，如下图所示： 域名绑定1.回到GitHub账户，在仓库yourname.github.io中添加一个CNAME文件，在里面添加你刚刚解析的域名，然后保存，如下图所示：2.打开yourname.github.io项目的Settings，向下翻，即可在github pages看到新域名配置完成，代表可以访问新域名了，如下图所示： 注意：博客项目的每次上传都会将GitHub账户的仓库yourname.github.io内的文件全部替换，CNAME也会不复存在，那就无法登陆新域名了解决方法：在【xxx\source】文件下建立一个CNAME文件，里面填入新域名即可 至此，博客搭建初步完成，博客主题更换配置见下篇文章。 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>IT</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[海子的诗（1）]]></title>
    <url>%2F2019%2F04%2F06%2F1%2F</url>
    <content type="text"><![CDATA[第一弹 活在珍贵的人间 —海子活在这珍贵的人间 太阳强烈 水波温柔 一层层白云覆盖着 我 踩在青草上 感到自己是彻底干净的黑土块 活在这珍贵的人间 泥土高溅 扑打面颊 活在这珍贵的人间 人类和植物一样幸福 爱情和雨水一样幸福 ——选自《海子诗全集》，作家出版社 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>文学</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
</search>
